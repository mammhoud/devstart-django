[project]
name = "django-starter"
version="0.1"
description = "Starter Project"
readme = "README.md"
requires-python = ">3.11"
dependencies = [
    "hatch>=1.14.1",
    "pipx>=1.7.1",
    "poetry>=2.1.3",
    "uvicorn>=0.34.2",
]
license = "MIT OR GPL-2.0-or-later OR (FSFUL AND BSD-2-Clause)"
keywords = []
authors = [
  { name = "Mahmoud", email = "Mahmoud.Ezzat.Moustafa@Gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
default-groups = ["dev"]
package = true
link-mode = "copy"

[tool.uv.pip]
system = true
upgrade = true
all-extras = true


[tool.hatch.metadata]
allow-direct-references = true

# ===========================================
# üîÅ Reuse dependency groups via hatch envs
# ===========================================
[tool.hatch.envs.prod]

features = ["prod"]
path = "./.venv/bin"


[tool.hatch.envs.local]
features = ["dev"]
dependencies = [
  # Extras for testing tools not included in prod group
  "ipdb",
  "pre-commit",
  "pytest",
  "pytest-django",
  "pytest-sugar",
  "mypy",
  "ruff",
]
dev-mode = true
platforms = ["linux", "windows", "macos"]
ci = true
default=true
path = "./.venv/bin"

# ===========================================
# üß™ Testing and Linters
# ===========================================
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db --import-mode=importlib"
python_files = ["tests.py", "test_*.py"]

[tool.coverage.run]
include = [""]
exclude = ["src/**"]
omit = ["*/migrations/*", "*/tests/*"]
plugins = ["django_coverage_plugin"]

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "config.settings.test"

[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2

[tool.ruff]
target-version = "py312"
extend-exclude = ["*/migrations/*.py", "staticfiles/*"]

[tool.ruff.lint]
select = [
  "F", "E", "W", "C90", "I", "N", "UP", "YTT", "ASYNC", "S", "BLE", "FBT", "B",
  "A", "COM", "C4", "DTZ", "T10", "DJ", "EM", "EXE", "FA", "ISC", "ICN", "G",
  "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM",
  "TID", "TC", "INT", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "FLY", "PERF", "RUF",
]
ignore = ["S101", "RUF012", "SIM102", "UP038"]
extend-unsafe-fixes = ["UP038"]

[tool.ruff.lint.isort]
force-single-line = true
case-sensitive = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


# ===========================================
# üì¶ Grouped Dependencies
# ===========================================
[dependency-groups]
dev = [
    "argon2-cffi==23.1.0",
    "celery==5.5.2",
    "coverage==7.8.0",
    "crispy-bootstrap5==2025.4",
    "django-allauth[mfa]==65.8.0",
    "django-anymail[amazon-ses]==13.0",
    "django-celery-beat==2.8.1",
    "django-coverage-plugin==3.1.0",
    "django-crispy-forms==2.4",
    "django-debug-toolbar==5.2.0",
    "django-environ==0.12.0",
    "django-extensions==4.1",
    "django-model-utils==5.0.0",
    "django-redis==5.4.0",
    "django-storages[s3]==1.14.6",
    "django-stubs[compatible-mypy]==5.2.0",
    "django-webpack-loader==3.2.0",
    "django==5.1.9",
    "djlint==1.36.4",
    "factory-boy==3.3.2",
    "fido2<2",
    "flower==2.0.1",
    "gunicorn==23.0.0",
    "hiredis==3.1.1",
    "ipdb==0.13.13",
    "mypy==1.15.0",
    "pillow==11.2.1",
    "pre-commit==4.2.0",
    "pytest-django==4.11.1",
    "pytest-sugar==1.0.0",
    "pytest==8.3.5",
    "python-slugify==8.0.4",
    "redis==6.1.0",
    "ruff==0.11.10",
    "sentry-sdk==2.29.1",
    "sphinx-autobuild==2024.10.3",
    "sphinx==8.2.3",
    "uvicorn-worker==0.3.0",
    "uvicorn[standard]==0.34.2",
    "watchfiles==1.0.5",
    "werkzeug[watchdog]==3.1.3",
    "whitenoise==6.9.0",
    "psycopg2-binary>=2.9.10",
]
prod = [
    "argon2-cffi==23.1.0",
    "celery==5.5.2",
    "crispy-bootstrap5==2025.4",
    "django-allauth[mfa]==65.8.0",
    "django-anymail[amazon-ses]==13.0",
    "django-celery-beat==2.8.1",
    "django-crispy-forms==2.4",
    "django-environ==0.12.0",
    "django-model-utils==5.0.0",
    "django-redis==5.4.0",
    "django-storages[s3]==1.14.6",
    "django-webpack-loader==3.2.0",
    "django==5.1.9",
    "fido2<2",
    "flower==2.0.1",
    "gunicorn==23.0.0",
    "hiredis==3.1.1",
    "pillow==11.2.1",
    "python-slugify==8.0.4",
    "redis==6.1.0",
    "sentry-sdk==2.29.1",
    "uvicorn-worker==0.3.0",
    "uvicorn[standard]==0.34.2",
    "whitenoise==6.9.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src/"]

# ==============================
# üöÄ CLI entry points / scripts
# ==============================
[project.scripts]
# django-starter = "manage:main"
# Add your custom CLI scripts here, example:
# my-command = "src.module:function"




[tool.hatch.envs.default.scripts]

# Install Node.js dependencies and clear npm cache
install = "npm install && npm cache clean --force"

# Development mode
dev-backend = "uv run --group dev ./manage.py {args}"
dev-frontend = "npm run dev"

# Production mode
prod-backend = "uv run --group prod ./manage.py {args}"
prod-frontend = "npm run build"

# Backend management only (tools, scripts, etc.)
dev-tool = "uv run --group dev ./manage.py {args}"
